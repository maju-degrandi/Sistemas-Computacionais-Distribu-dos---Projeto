version: "3.9"

networks:
  distribuidos:
    driver: bridge

services:
  proxy:
    build:
      context: ../packages/proxy
      dockerfile: ./Dockerfile
    container_name: distribuidos-proxy
    ports:
      - 6027:80
    depends_on:
      - frontend
      - backend
    networks:
      - distribuidos
    restart: always

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: distribuidos-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    networks:
      - distribuidos
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka
    container_name: distribuidos-kafka
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    expose:
      - 9091
      - 29091
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9091,PLAINTEXT_HOST://kafka:29091,PLAINTEXT_LOCAL://localhost:9092,PLAINTEXT_HOST_LOCAL://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,PLAINTEXT_LOCAL:PLAINTEXT,PLAINTEXT_HOST_LOCAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - distribuidos
    restart: unless-stopped

  init-kafka:
    image: confluentinc/cp-kafka:latest
    container_name: distribuidos-init-kafka
    depends_on:
      - kafka
    entrypoint: ["/bin/sh", "-c"]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29091 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29091 --create --if-not-exists --topic sale-log --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29091 --list
      "
    networks:
      - distribuidos

  postgres:
    image: postgres
    restart: unless-stopped
    container_name: distribuidos-postgres
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: distribuidos
      POSTGRES_PASSWORD: "123456"
      POSTGRES_DB: distribuidos
    volumes:
      - ../volumes/database:/var/lib/postgresql/data
    networks:
      - distribuidos

  frontend:
    build:
      context: ../packages/frontend
      dockerfile: ./docker/Dockerfile
    container_name: distribuidos-frontend
    ports:
      - 3000:3000
    networks:
      - distribuidos
    depends_on:
      - backend
    restart: always

  backend:
    build:
      context: ../packages
      dockerfile: ./backend/Dockerfile
    container_name: distribuidos-backend
    ports:
      - 3001:3000
    depends_on:
      postgres:
        condition: service_started
      init-kafka:
        condition: service_completed_successfully
      kafka:
        condition: service_started
    networks:
      - distribuidos
    volumes:
      - ../volumes/prometheus:/tmp/prometheus
    environment:
      - SQLALCHEMY_DATABASE_URI=postgresql://distribuidos:123456@postgres:5432/distribuidos
      - KAFKA_BOOTSTRAP_SERVER_URI=kafka:9091
      - SCRIPT_NAME=/api
      - FLASK_ENV=production
      - PROMETHEUS_MULTIPROC_DIR=/tmp/prometheus
    restart: always

  consumer:
    build:
      context: ../packages
      dockerfile: ./consumer/Dockerfile
    container_name: distribuidos-consumer
    ports:
      - 3002:3000
    depends_on:
      - backend
      - kafka
    networks:
      - distribuidos
    environment:
      - SQLALCHEMY_DATABASE_URI=postgresql://distribuidos:123456@postgres:5432/distribuidos
      - KAFKA_BOOTSTRAP_SERVER_URI=kafka:9091
    restart: always

  # Observability
  prometheus:
    image: prom/prometheus
    container_name: distribuidos-prometheus
    ports:
      - 9090:9090
    volumes:
      - ../monitoring/prometheus:/etc/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    networks:
      - distribuidos
    restart: always
    depends_on:
      - node-exporter
      - postgres-exporter
      - kafka-exporter
      - backend

  grafana:
    image: grafana/grafana
    container_name: distribuidos-grafana
    user: "0"
    ports:
      - 5027:3000
    networks:
      - distribuidos
    restart: always
    volumes:
      - ../volumes/grafana:/var/lib/grafana
      - ../monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ../monitoring/grafana/dashboards:/etc/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=distribuidos
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_HTTP_PORT=3000
    depends_on:
      - prometheus

  node-exporter:
    image: prom/node-exporter
    container_name: distribuidos-node-exporter
    ports:
      - 9100:9100
    networks:
      - distribuidos
    restart: always

  postgres-exporter:
    image: quay.io/prometheuscommunity/postgres-exporter
    container_name: distribuidos-postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://distribuidos:123456@postgres:5432/distribuidos?sslmode=disable"
    ports:
      - "9187:9187"
    networks:
      - distribuidos
    restart: always
    depends_on:
      - postgres

  kafka-exporter:
    image: danielqsj/kafka-exporter:latest
    container_name: distribuidos-kafka-exporter
    command:
      [
        "--kafka.server=kafka:9091",
        "--zookeeper.server=zookeeper:2181",
        "--use.consumelag.zookeeper",
      ]
    ports:
      - "9308:9308"
    networks:
      - distribuidos
    restart: always
    depends_on:
      kafka:
        condition: service_started
      init-kafka:
        condition: service_completed_successfully
